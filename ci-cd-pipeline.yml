name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: "my-app"
  APP_IMAGE: "ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}"
  KUBE_NAMESPACE: "production"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          junit.xml
          coverage/

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.APP_IMAGE }}
        tags: |
          type=sha
          type=ref,event=branch
          latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir -p ~/.kube
        echo '${{ secrets.KUBE_CONFIG }}' | base64 -d > ~/.kube/config
        kubectl config set-cluster local --server=${{ secrets.KUBE_SERVER }} --insecure-skip-tls-verify=true

    - name: Deploy to Kubernetes
      run: |
        # Update deployment with new image
        kubectl set image deployment/${{ env.APP_NAME }} \
          ${{ env.APP_NAME }}=${{ env.APP_IMAGE }}:${{ github.sha }} \
          -n ${{ env.KUBE_NAMESPACE }}

        # Wait for rollout to complete
        kubectl rollout status deployment/${{ env.APP_NAME }} \
          -n ${{ env.KUBE_NAMESPACE }} \
          --timeout=300s

        # Verify deployment
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get services -n ${{ env.KUBE_NAMESPACE }}

    - name: Run health check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30

        # Get service IP (adjust based on your service type)
        SERVICE_IP=$(kubectl get service ${{ env.APP_NAME }}-service \
          -n ${{ env.KUBE_NAMESPACE }} \
          -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

        if [ -n "$SERVICE_IP" ]; then
          echo "Running health check on $SERVICE_IP"
          curl -f http://$SERVICE_IP/health || exit 1
        else
          echo "Service IP not available, using port-forward for health check"
          kubectl port-forward service/${{ env.APP_NAME }}-service 8080:80 -n ${{ env.KUBE_NAMESPACE }} &
          sleep 5
          curl -f http://localhost:8080/health || exit 1
        fi
